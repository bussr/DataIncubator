ls()
getwd()
lol = read.csv("LeagueData.csv")
head(lol)
lol$won = lol$winner
lol$won[which(lol$winner=='False')] = 0
lol$won=NA
lol$won[which(lol$winner=='False')] = 0
lol$won[which(lol$winner=='True')] = 1
range(lol$won)
head(lol$won)
head(lol)
test = ddply(lol, .(wardsPlaced, won), summarize, WinRate = mean(won))
require(plyr)
test = ddply(lol, .(wardsPlaced, won), summarize, WinRate = mean(won))
head(test)
test = ddply(lol, .(wardsPlaced), summarize, WinRate = mean(won))
head(test)
qplot(test)
ggplot(test, aes(x=wardsPlaced, y=WinRate))
require(ggplot)
require(ggplot2)
qplot(test)
ggplot(test, aes(x=wardsPlaced, y=WinRate))
ggplot(test, aes(x=wardsPlaced, y=WinRate)) + geom_density
ggplot(test, aes(x=wardsPlaced, y=WinRate)) + geom_density()
ggplot(test, aes(x=wardsPlaced, y=WinRate)) + geom_point
ggplot(test, aes(x=wardsPlaced, y=WinRate)) + geom_point()
test1 = subset(test, test$wardsPlaced < 75)
ggplot(test1, aes(x=wardsPlaced, y=WinRate)) + geom_point()
test1 = subset(test, test$wardsPlaced < 60)
ggplot(test1, aes(x=wardsPlaced, y=WinRate)) + geom_point()
winrate = ddply(lol, .(wardsPlaced), summarize, WinRate = mean(won), winSD = sd(won))
head(winrate)
ggplot(test1, aes(x=wardsPlaced, y=WinRate, color=WinRate)) + geom_point()
ggplot(test1, aes(x=wardsPlaced, y=WinRate, color=WinRate)) + geom_point(size=1.5)
ggplot(test1, aes(x=wardsPlaced, y=WinRate, color=WinRate)) + geom_point(size=3.5)
ggplot(test1, aes(x=wardsPlaced, y=WinRate, color=WinRate)) + geom_point(size=2.5)
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(test1)
lm(WinRate ~ wardsPlaced, data=test1)
lm.test = lm(WinRate ~ wardsPlaced, data=test1)
summary(lm.test)
lm.test$terms
lm.test$coefficients
shiny::runApp()
lm.test$coefficients[1]
lm.test$coefficients[2]
lm.test$coefficients[2] + 3
lm.test$coefficients[2] *100
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(shinyapps)
deployApp()
shiny::runApp()
deployApp()
dice.rolls.to.M <- function(M) {
#returns a vector of dice rolls that reached max M
current.sum = 0
rolls = vector()
while(current.sum <M){
rolls = append(rolls, sample.int(6,1))
current.sum = sum(rolls)
}
return(rolls)
}
mean.sum.minus.m <- function(M, iterations=9001){
#returns the mean of a number of iterations of the sum of dice.rolls.to.M minus M
return(mean(replicate(iterations, sum(dice.rolls.to.M(M))-M)))
}
cat("What is the mean of the sum minus $M$ when $M = 20$?\n")
mean.sum.minus.m(20)
cat("\nWhat is the mean of the sum minus $M$ when $M = 10000$?\n")
mean.sum.minus.m(10000)
sd.sum.minus.m <- function(M, iterations=9001){
#returns the standard deviation of a number of iterations of the sum of dice.rolls.to.M minus M
return(sd(replicate(iterations, sum(dice.rolls.to.M(M))-M)))
}
cat("\nWhat is the standard deviation of the sum minus $M$ when $M = 20$?\n")
sd.sum.minus.m(20)
cat("\nWhat is the standard deviation of the sum minus $M$ when $M = 10000$?\n")
sd.sum.minus.m(10000)
mean.rolls <- function(M, iterations=9001){
#returns the mean number of rolls of a number of iterations of dice.rolls.to.M
return(mean(replicate(iterations, length(dice.rolls.to.M(M)))))
}
cat("\nWhat is the mean of the number of rolls when $M = 20$?\n")
mean.rolls(20)
cat("\nWhat is the mean of the number of rolls when $M = 10000$?\n")
mean.rolls(10000)
sd.rolls <- function(M, iterations=9001){
#returns the standard deviation of the number of rolls of a number of iterations of dice.rolls.to.M
return(sd(replicate(iterations, length(dice.rolls.to.M(M)))))
}
cat("\nWhat is the standard deviation of the number of rolls when $M = 20$?\n")
sd.rolls(20)
cat("\nWhat is the standard deviation of the number of rolls when $M = 10000$?")
sd.rolls(10000)
32*6
??quantiles
getwd()
setwd("~/TheDataIncubator/DataIncubator_Fares")
list.files()
fare = read.csv("trip_fare_3.csv")
cat("\nWhat fraction of payments under $5 use a credit card?\n")
# exclude fare totals of $5 or above, and $0 or below.
# I assume a fare of 0 does not count as a "payment".
fare.lessthan5 = subset(fare, fare$total_amount<5 & fare$total_amount>0)
payment.types.table = table(fare.lessthan5$payment_type)
# For payment_types
#   Assuming: 'CRD' = Credit Card, 'CSH' = Cash, 'DIS' = Disputed fare, 'NOC' = No charge, 'UNK' = Unknown
#
# Therefore, DIS, NOC, and UNK payment types are excluded, as these seem to indicate that there was no payment
# Fraction of payments that use Credit: Credit / (Credit + Cash)
print(payment.types.table[1] / (payment.types.table[1]+payment.types.table[2])) # [1] is CRD, [2] is CSH
cat("\nWhat fraction of payments over $50 use a credit card?\n")
fare.morethan50 = subset(fare, fare$total_amount>50)
payment.types.table = table(fare.morethan50$payment_type)
# Assumptions about payment_type codes listed previously
payment.types.table[1] / (payment.types.table[1]+payment.types.table[2]) # [1] is CRD, [2] is CSH
head(fare)
?strsplit
strsplit(fare$pickup_datetime[1])
strsplit(as.character(fare$pickup_datetime[1]), c(5,8))
as.character(fare$pickup_datetime[1])
strsplit(as.character(fare$pickup_datetime[1]), '-[:digit:]{2}-')
strsplit(as.character(fare$pickup_datetime[1]), '-')
parseDate <- function(string){
return(strsplit(as.character(string), '-')[2])
}
parseDate(fare$pickup_datetime[1])
parseDate <- function(string){
return(unlist(strsplit(as.character(string), '-'))[2])
}
parseDate(fare$pickup_datetime[1])
parseDate(fare$pickup_datetime[99999])
parseDate(fare$pickup_datetime[999999])
parseDate(fare$pickup_datetime[1999999])
parseDate(fare$pickup_datetime[4999999])
parseDate(fare$pickup_datetime[9999999])
parseDate(fare$pickup_datetime[99999999])
parseDate(fare$pickup_datetime[19999999])
parseDate(fare$pickup_datetime[9999999])
fare$pickup_datetime[1000]
getwd()
lol = read.csv('G:/data/lolParse.csv')
head(lol)
lol = read.csv('G:/data/lolParse.csv', header=F)
head(lol)
colnames(lol) = c('gameNumber', 'matchNumber', 'matchMode','season','matchDuration','queueType','matchType','mapId', 'playerId',
'championId','highestAchievedSeasonTier','item0','item1','item2','item3','item4','item5','item6',
'sightWardsBoughtInGame','visionWardsBoughtInGame','wardsKilled','wardsPlaced',
'firstInhibitorAssist', 'firstInhibitorKill', 'lane', 'winner',
'baronKills', 'dragonKills', 'firstBaron', 'firstBlood', 'firstDragon', 'firstInhibitor', 'firstTower',
'inhibitorKills', 'towerKills', 'deleteme')
head(lol)
lol$deleteme = NULL
range(lol$gameNumber)
length(unique(lol$matchNumber))
lol2 = read.csv('G:/data/lolParse.csv', header=F)
colnames(lol2) = c('gameNumber', 'matchNumber', 'matchMode','season','matchDuration','queueType','matchType','mapId', 'playerId',
'championId','highestAchievedSeasonTier','item0','item1','item2','item3','item4','item5','item6',
'sightWardsBoughtInGame','visionWardsBoughtInGame','wardsKilled','wardsPlaced',
'firstInhibitorAssist', 'firstInhibitorKill', 'lane', 'winner',
'baronKills', 'dragonKills', 'firstBaron', 'firstBlood', 'firstDragon', 'firstInhibitor', 'firstTower',
'inhibitorKills', 'towerKills', 'deleteme')
head(lol2)
length(unique(lol2$matchNumber))
range(lol2$gameNumber)
lol = lol2
range(lol2$championId)
champs = read.csv('G:/data/ChampionIds.txt', header=F)
colnames(champs) = c("championId", "name")
convertChampIdToName <- function(id) {
return(champs$name[which(champs$championId==id)])
}
for(i in 1:nrow(lol)){
lol$championName[i] = as.character(convertChampIdToName(lol$championId[i]))}
head(lol)
lol$deleteme=NULL
unique(lol$matchMode)
unique(lol$queueType)
unique(lol$season)
length(nrow(lol$championName[which(lol$championName=='Vayne')]))
nrow(lol$championName[which(lol$championName=='Vayne')])
lol[which(lol$championName=='Vayne'),]
nrow(lol[which(lol$championName=='Vayne'),])
head(lol)
?table
table(lol$championName)
?selectInput
require(shiny)
require(shinyapps)
?selectInput
head(champs)
