lol.backup = lol
?count
table = table(lol$championName)
table[2]
table[2] + 1
table2
table[2]
table['Ahri']
table[lol$championName[1]]
typeof(table[lol$championName[1]])
head(table[lol$championName])
lol$championFreq = table[lol$championName]
head(lol)
lol.backup = lol
?max
max(lol$championFreq)
'Vayne' %in% champs$name
champs$name
?order
champs
test1 = champs[order(champs$name),]
test1
sel = c('Zac', 'Zed', 'Vi')
subset(champs, champs$name==sel)
subset(champs, champs$name %in% sel)
c('Yorick', 'Zed', 'Zyra') %in% sel
if( c('Zed', 'Vi') %in% sel) print(1)
if( all(c('Zed', 'Vi') %in% sel)) print(1)
if(! all(c('Zed', 'Vi') %in% sel)) print(1)
head(test1)
require(ggplot2)
p = ggplot(lol, aes=(x=championName)) + geom_bar()
p
p = ggplot(lol, aes(x=championName)) + geom_bar()
p
test1 = subset(lol, lol$championName %in% sel)
head(test1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
champs$name
head(champs)
shiny::runApp()
champs.names = champs
champs.names$championId = NULL
champs.names
shiny::runApp()
shiny::runApp()
champs.names
champs.names[order(champs.names$name),]
unique(lol$championName)
shiny::runApp()
unique(lol$championName)[order(unique(lol$championName)),]
unique(lol$championName)[order(unique(lol$championName))]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
T && T
T & T
T & c(T, T, T)
T && c(T, T, T)
shiny::runApp()
head(lol)
write.csv(lol, 'LeagueMatchData.csv', header=T)
write.csv(lol, 'LeagueMatchData.csv', row.names=F)
shiny::runApp()
shiny::runApp()
head(lol)
head(graves)
unique(graves$lane)
champion = graves
champion$winnerNum = NA
champion$winnerNum[which(champion$winner == 'True')] = 1
champion$winnerNum[which(champion$winner == 'False')] = 0
head(champion)
mean(champion$winnerNum)
for(name in c('dog', 'cat', 'bat')){print(name)}
test3 = data.frame('cat', 'bat', 'rat')
test3
test3 = data.frame()
rbind(test3, as.data.frame(c('cat', 'bat', 'rat')))
as.list(1)
1
is.list(1)
is.list(c(1,2))
is.vector(c(1,2))
as.vector(1)
is.vector(1)
for(i in 1) {print i}
for(i in 1) {print(i)}
head(graves)
test3 = data.frame()
nrow(test34)
nrow(test3)
balanceMeasures <- function(lol, champions) {
# from a data frame containing league matches, and a vector of champion names
# return a data frame with columns:
# championName, winPct, firstDragonPct, firstBaronPct, firstInhibitorPct
if(! all(champions) %in% unique(lol$championName)){
stop('balanceMeasures failed because it was passed and unknown Champions')
}
balance = data.frame()
for(champ in champions){
champ$winnerNum = NA
champ$winnerNum[which(champion$winner == 'True')] = 1
champ$winnerNum[which(champion$winner == 'False')] = 0
champ$firstBaronNum = NA
champ$firstBaronNum[which(champion$firstBaron == 'True')] = 1
champ$firstBaronNum[which(champion$firstBaron == 'False')] = 0
champ$firstDragonNum = NA
champ$firstDragonNum[which(champion$firstDragon == 'True')] = 1
champ$firstDragonNum[which(champion$firstDragon == 'False')] = 0
champ$firstInhibitorNum = NA
champ$firstInhibitorNum[which(champion$firstInhibitor == 'True')] = 1
champ$firstInhibitorNum[which(champion$firstInhibitor == 'False')] = 0
champ.bal = data.frame( championName = champ,
winPct = mean(champ$winnerNum),
firstDragonPct = mean(champ$firstDragonNum),
firstBaronPct = mean(champ$firstBaronNum),
firstInhibitorPct = mean(champ$firstInhibitorNum)
)
if(nrow(balance) > 0){
balance = rbind(balance, champ.bal)
}
else balance = champ.bal
}
}
test4 = balanceMeasures(lol, c('Vayne', 'Thresh'))
balanceMeasures <- function(lol, champions) {
# from a data frame containing league matches, and a vector of champion names
# return a data frame with columns:
# championName, winPct, firstDragonPct, firstBaronPct, firstInhibitorPct
if(! all(champions %in% unique(lol$championName))){
stop('balanceMeasures failed because it was passed and unknown Champions')
}
balance = data.frame()
for(champ in champions){
champ$winnerNum = NA
champ$winnerNum[which(champion$winner == 'True')] = 1
champ$winnerNum[which(champion$winner == 'False')] = 0
champ$firstBaronNum = NA
champ$firstBaronNum[which(champion$firstBaron == 'True')] = 1
champ$firstBaronNum[which(champion$firstBaron == 'False')] = 0
champ$firstDragonNum = NA
champ$firstDragonNum[which(champion$firstDragon == 'True')] = 1
champ$firstDragonNum[which(champion$firstDragon == 'False')] = 0
champ$firstInhibitorNum = NA
champ$firstInhibitorNum[which(champion$firstInhibitor == 'True')] = 1
champ$firstInhibitorNum[which(champion$firstInhibitor == 'False')] = 0
champ.bal = data.frame( championName = champ,
winPct = mean(champ$winnerNum),
firstDragonPct = mean(champ$firstDragonNum),
firstBaronPct = mean(champ$firstBaronNum),
firstInhibitorPct = mean(champ$firstInhibitorNum)
)
if(nrow(balance) > 0){
balance = rbind(balance, champ.bal)
}
else balance = champ.bal
}
}
test4 = balanceMeasures(lol, c('Vayne', 'Thresh'))
test4
balanceMeasures <- function(lol, champions) {
# from a data frame containing league matches, and a vector of champion names
# return a data frame with columns:
# championName, winPct, firstDragonPct, firstBaronPct, firstInhibitorPct
if(! all(champions %in% unique(lol$championName))){
stop('balanceMeasures failed because it was passed and unknown Champions')
}
balance = data.frame()
for(champion in champions){
champ = subset(lol, lol$championName==champion)
champ$winnerNum = NA
champ$winnerNum[which(champion$winner == 'True')] = 1
champ$winnerNum[which(champion$winner == 'False')] = 0
champ$firstBaronNum = NA
champ$firstBaronNum[which(champion$firstBaron == 'True')] = 1
champ$firstBaronNum[which(champion$firstBaron == 'False')] = 0
champ$firstDragonNum = NA
champ$firstDragonNum[which(champion$firstDragon == 'True')] = 1
champ$firstDragonNum[which(champion$firstDragon == 'False')] = 0
champ$firstInhibitorNum = NA
champ$firstInhibitorNum[which(champion$firstInhibitor == 'True')] = 1
champ$firstInhibitorNum[which(champion$firstInhibitor == 'False')] = 0
champ.bal = data.frame( championName = champ,
winPct = mean(champ$winnerNum),
firstDragonPct = mean(champ$firstDragonNum),
firstBaronPct = mean(champ$firstBaronNum),
firstInhibitorPct = mean(champ$firstInhibitorNum)
)
if(nrow(balance) > 0){
balance = rbind(balance, champ.bal)
}
else balance = champ.bal
}
}
test4 = balanceMeasures(lol, c('Vayne', 'Thresh'))
balanceMeasures <- function(lol, champions) {
# from a data frame containing league matches, and a vector of champion names
# return a data frame with columns:
# championName, winPct, firstDragonPct, firstBaronPct, firstInhibitorPct
if(! all(champions %in% unique(lol$championName))){
stop('balanceMeasures failed because it was passed and unknown Champions')
}
balance = data.frame()
for(champion in champions){
print(champion) #debug
champ = subset(lol, lol$championName==champion)
champ$winnerNum = NA
champ$winnerNum[which(champ$winner == 'True')] = 1
champ$winnerNum[which(champ$winner == 'False')] = 0
champ$firstBaronNum = NA
champ$firstBaronNum[which(champ$firstBaron == 'True')] = 1
champ$firstBaronNum[which(champ$firstBaron == 'False')] = 0
champ$firstDragonNum = NA
champ$firstDragonNum[which(champ$firstDragon == 'True')] = 1
champ$firstDragonNum[which(champ$firstDragon == 'False')] = 0
champ$firstInhibitorNum = NA
champ$firstInhibitorNum[which(champ$firstInhibitor == 'True')] = 1
champ$firstInhibitorNum[which(champ$firstInhibitor == 'False')] = 0
champ.bal = data.frame( championName = champion,
winPct = mean(champ$winnerNum),
firstDragonPct = mean(champ$firstDragonNum),
firstBaronPct = mean(champ$firstBaronNum),
firstInhibitorPct = mean(champ$firstInhibitorNum)
)
if(nrow(balance) > 0){
balance = rbind(balance, champ.bal)
}
else balance = champ.bal
}
}
test4 = balanceMeasures(lol, c('Vayne', 'Thresh'))
test4
balanceMeasures <- function(lol, champions) {
# from a data frame containing league matches, and a vector of champion names
# return a data frame with columns:
# championName, winPct, firstDragonPct, firstBaronPct, firstInhibitorPct
if(! all(champions %in% unique(lol$championName))){
stop('balanceMeasures failed because it was passed and unknown Champions')
}
balance = data.frame()
for(champion in champions){
print(champion) #debug
champ = subset(lol, lol$championName==champion)
champ$winnerNum = NA
champ$winnerNum[which(champ$winner == 'True')] = 1
champ$winnerNum[which(champ$winner == 'False')] = 0
champ$firstBaronNum = NA
champ$firstBaronNum[which(champ$firstBaron == 'True')] = 1
champ$firstBaronNum[which(champ$firstBaron == 'False')] = 0
champ$firstDragonNum = NA
champ$firstDragonNum[which(champ$firstDragon == 'True')] = 1
champ$firstDragonNum[which(champ$firstDragon == 'False')] = 0
champ$firstInhibitorNum = NA
champ$firstInhibitorNum[which(champ$firstInhibitor == 'True')] = 1
champ$firstInhibitorNum[which(champ$firstInhibitor == 'False')] = 0
champ.bal = data.frame( championName = champion,
winPct = mean(champ$winnerNum),
firstDragonPct = mean(champ$firstDragonNum),
firstBaronPct = mean(champ$firstBaronNum),
firstInhibitorPct = mean(champ$firstInhibitorNum)
)
if(nrow(balance) > 0){
balance = rbind(balance, champ.bal)
}
else balance = champ.bal
}
return(balance)
}
test4 = balanceMeasures(lol, c('Vayne', 'Thresh'))
test4
ggplot(test4, aes(winPct, fill=championName)) + geom_bar(stat='identity')
ggplot(test4, aes(x=winPct, fill=championName)) + geom_bar(stat='identity')
ggplot(test4, aes(x=championName, y=winPct)) + geom_bar(stat='identity')
ggplot(test4, aes(x=championName, y=winPct, colour=championName)) + geom_bar(stat='identity')
ggplot(test4, aes(x=championName, y=winPct, fill=championName)) + geom_bar(stat='identity')
ggplot(test4, aes(x=championName, y=winPct, fill=championName)) + geom_bar(stat='identity') + ylim(0,1)
ggplot(test4, aes(x=championName, y=winPct*100, fill=championName)) + geom_bar(stat='identity') + ylim(0,100)
round(1234.5678, 1)
round(1234.5678, 0)
round(123.456)
balanceMeasures <- function(lol, champions) {
# from a data frame containing league matches, and a vector of champion names
# return a data frame with columns:
# championName, winPct, firstDragonPct, firstBaronPct, firstInhibitorPct
if(! all(champions %in% unique(lol$championName))){
stop('balanceMeasures failed because it was passed and unknown Champions')
}
balance = data.frame()
for(champion in champions){
print(champion) #debug
champ = subset(lol, lol$championName==champion)
champ$winnerNum = NA
champ$winnerNum[which(champ$winner == 'True')] = 1
champ$winnerNum[which(champ$winner == 'False')] = 0
champ$firstBaronNum = NA
champ$firstBaronNum[which(champ$firstBaron == 'True')] = 1
champ$firstBaronNum[which(champ$firstBaron == 'False')] = 0
champ$firstDragonNum = NA
champ$firstDragonNum[which(champ$firstDragon == 'True')] = 1
champ$firstDragonNum[which(champ$firstDragon == 'False')] = 0
champ$firstInhibitorNum = NA
champ$firstInhibitorNum[which(champ$firstInhibitor == 'True')] = 1
champ$firstInhibitorNum[which(champ$firstInhibitor == 'False')] = 0
champ.bal = data.frame( Champion = champion,
winPct = round( 100 * mean(champ$winnerNum)),
firstDragonPct = round( 100 * mean(champ$firstDragonNum)),
firstBaronPct = round(100 * mean(champ$firstBaronNum)),
firstInhibitorPct = round(100 * mean(champ$firstInhibitorNum)))
if(nrow(balance) > 0){
balance = rbind(balance, champ.bal)
}
else balance = champ.bal
}
return(balance)
}
ggplot(test4, aes(x=championName, y=winPct*100, fill=championName)) + geom_bar(stat='identity') + ylim(25,75) + labs(x='Champion', y='Win Percentage')
test4
ggplot(test4, aes(x=championName, y=winPct, fill=championName)) + geom_bar(stat='identity') + labs(x='Champion', y='Win Percentage')
runExample()
runExample('03_reactivity')
runExample('03_reactivity')
runExample('04_mpg')
runExample('07_widgets')
runExample('06_tabsets')
shiny::runApp()
library(markdown)
runExample('06_tabsets')
shiny::runApp()
runExample('06_tabsets')
shiny::runApp()
test5  = read.csv('LeagueMatchData.csv', header=T)
head(test5)
runExample()
runExample('05_sliders')
?sliderInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
round(12345, -1)
shiny::runApp()
?selectizeInput
shiny::runApp()
shiny::runApp()
test6 = read.csv('ChampionIds.csv', header=F)
head(test6)
colnames(champs) = c('championId', 'name')
champs$championId = NULL
champ.names = champs[order(champs$name),]
head(champ.names)
typeof(champ.names)
shiny::runApp()
champs = read.csv('ChampionIds.csv', header=F)
colnames(champs) = c('championId', 'name')
champs$championId = NULL
champ.names = champs[order(champs$name),]
head(champ.names)
champ.names
shiny::runApp()
unique(champ.names)
as.list(champ.names)
shiny::runApp()
runExample('05_sliders')
is.null(NULL)
is.null(T)
shiny::runApp()
shiny::runApp()
list(champ.names)
shiny::runApp()
unlist(champ.names)
levels(champ.names)
shiny::runApp()
head(popular)
tail(popular)
popular
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
levels(lol$championName)
head(lol$championName)
?reorder
head(lol)
test2 = transform(lol, championName = reorder(championName, championFreq))
head(test2)
?transform
test2 = lol[order(lol$championFreq), ]
head(test2)
lol.champ = test2
p = ggplot(lol.champ, aes(x=championName, fill=championName)) +
geom_bar() +
ylim(0,round(max(lol$championFreq)+10, -1)) +
labs(title="Champion Frequency in Dataset", x="Champion", y='Count')
p
count(unique(lol$matchNumber))
length(unique(lol$matchNumber))
NULL %in% unique(lol$championName)
if(NULL %in% unique(lol$championName)) print(1)
levels(lol$championName)
levels(factor(lol$championName))
balanceMeasures <- function(lol, champions) {
# from a data frame containing league matches, and a vector of champion names
# return a data frame with columns:
# championName, winPct, firstDragonPct, firstBaronPct, firstInhibitorPct
if(is.null(champions)){
champions = levels(factor(lol$championName))
}
if(! all(champions %in% unique(lol$championName))){
stop('balanceMeasures failed because it was passed unknown Champions')
}
balance = data.frame()
for(champion in champions){
#print(champion) #debug
champ = subset(lol, lol$championName==champion)
champ$winnerNum = NA
champ$winnerNum[which(champ$winner == 'True')] = 1
champ$winnerNum[which(champ$winner == 'False')] = 0
champ$firstBaronNum = NA
champ$firstBaronNum[which(champ$firstBaron == 'True')] = 1
champ$firstBaronNum[which(champ$firstBaron == 'False')] = 0
champ$firstDragonNum = NA
champ$firstDragonNum[which(champ$firstDragon == 'True')] = 1
champ$firstDragonNum[which(champ$firstDragon == 'False')] = 0
champ$firstInhibitorNum = NA
champ$firstInhibitorNum[which(champ$firstInhibitor == 'True')] = 1
champ$firstInhibitorNum[which(champ$firstInhibitor == 'False')] = 0
champ.bal = data.frame( Champion = champion,
winPct = round( 100 * mean(champ$winnerNum)),
firstDragonPct = round( 100 * mean(champ$firstDragonNum)),
firstBaronPct = round(100 * mean(champ$firstBaronNum)),
firstInhibitorPct = round(100 * mean(champ$firstInhibitorNum)))
if(nrow(balance) > 0){
balance = rbind(balance, champ.bal)
}
else balance = champ.bal
}
return(balance)
}
bal = balanceMeasures(lol, NULL)
head(bal)
require(reshape)
head(test2)
test7 = melt(bal, id.vars=Champion)
test7 = melt(bal, id.vars=champion)
head(test7)
head(bal)
bal$Champion = as.factor(bal$Champion)
test7 = melt(bal, id.vars=Champion)
test7 = melt(bal, id.vars=bal$Champion)
test7
typeof(bal$winPct)
typeof(bal$firstDragonPct)
test7 = melt(bal)
head(test7)
nrow(test7)
?geom_bar
ggplot(test7, mapping = aes(x=Champion, fill=variable, y=value)) + geom_bar(stat='identity', position='dodge')
write.csv(test7, 'LeagueChampionBalanceStats.csv')
test8 = subset(test7, test7$Champion %in% c('Jax', 'Annie', 'Zed', 'Graves'))
ggplot(test8, mapping = aes(x=Champion, fill=variable, y=value)) + geom_bar(stat='identity', position='dodge')
write.csv(test7, 'LeagueChampionBalanceStats.csv', row.names=F)
shiny::runApp()
shiny::runApp()
runExample()
runExample('06_tabsets')
shiny::runApp()
test9 = read.csv('LeagueChampionBalanceStats.csv', header=F)
head(test9)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(test8)
round(max(test8$value)+10, -1)
round(max(test7$value)+10, -1)
head(test7)
shiny::runApp()
shiny::runApp()
deployApp
deployApp()
require(shinyapps)
deployApp()
deployApp()
.167 * 7
7/36
7 * (6/36)
test = function(t){t* (t^6-1)/(t-1)}
test(1)
test(2)
test = function(t, n){(t^n)*((1-t^6)/(1-t)}
test = function(t, n){(t^n)*((1-t^6)/(1-t)}
test = function(t, n){
(t^n)*((1-t^6)/(1-t))
}
test(7,2)
?sum
??choose
6/36
?rep
