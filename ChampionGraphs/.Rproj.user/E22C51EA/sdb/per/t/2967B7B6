{
    "contents" : "\n# The Data Incubator Challenge Question 1\n# Author: Ryan Buss, ryanpbuss@gmail.com\n# Created April 8, 2015\n\ndice.rolls.to.M <- function(M) {\n  #returns a vector of dice rolls that reached max M\n  current.sum = 0\n  rolls = vector()\n  while(current.sum <M){\n    rolls = append(rolls, sample.int(6,1))\n    current.sum = sum(rolls)\n  }\n  return(rolls)\n}\n\nmean.sum.minus.m <- function(M, iterations=9001){\n  #returns the mean of a number of iterations of the sum of dice.rolls.to.M minus M\n  return(mean(replicate(iterations, sum(dice.rolls.to.M(M))-M)))\n}\ncat(\"What is the mean of the sum minus $M$ when $M = 20$?\\n\")\nmean.sum.minus.m(20)\n\ncat(\"\\nWhat is the mean of the sum minus $M$ when $M = 10000$?\\n\")\nmean.sum.minus.m(10000)\n\nsd.sum.minus.m <- function(M, iterations=9001){\n  #returns the standard deviation of a number of iterations of the sum of dice.rolls.to.M minus M\n  return(sd(replicate(iterations, sum(dice.rolls.to.M(M))-M)))\n}\ncat(\"\\nWhat is the standard deviation of the sum minus $M$ when $M = 20$?\\n\")\nsd.sum.minus.m(20)\n\ncat(\"\\nWhat is the standard deviation of the sum minus $M$ when $M = 10000$?\\n\")\nsd.sum.minus.m(10000)\n\nmean.rolls <- function(M, iterations=9001){\n  #returns the mean number of rolls of a number of iterations of dice.rolls.to.M \n  return(mean(replicate(iterations, length(dice.rolls.to.M(M)))))\n}\ncat(\"\\nWhat is the mean of the number of rolls when $M = 20$?\\n\")\nmean.rolls(20)\n\ncat(\"\\nWhat is the mean of the number of rolls when $M = 10000$?\\n\")\nmean.rolls(10000)\n\n\nsd.rolls <- function(M, iterations=9001){\n  #returns the standard deviation of the number of rolls of a number of iterations of dice.rolls.to.M \n  return(sd(replicate(iterations, length(dice.rolls.to.M(M)))))\n}\ncat(\"\\nWhat is the standard deviation of the number of rolls when $M = 20$?\\n\")\nsd.rolls(20)\n\ncat(\"\\nWhat is the standard deviation of the number of rolls when $M = 10000$?\")\nsd.rolls(10000)\n\n\n#######################################################################################\n# The Data Incubator Challenge Question 2\n# Author: Ryan Buss, ryanpbuss@gmail.com\n# Created April 9, 2015\n\nfare = read.csv(file = \"~/DataIncubator_Fares/trip_fare_3.csv\")\ntrip = read.csv(file=\"~/DataIncubator_Fares/trip_data_3.csv\")\n# good thing I have a 64-bit OS and 16GB of RAM\nfull.fare = merge(fare, trip) #I didn't do this blindly. \n#Checked that the medallion, hack_license, and pickup_datetime columns matched up before merging. Also, exact same number of rows.\n\n# Based on a convincing argument by Vijay Pandurangan, the hack_license value \"CFCD208495D565EF66E7DFF9F98764DA\" results from a data collection error\n# https://medium.com/@vijayp/of-taxis-and-rainbows-f6bc289679a1\n# For measures like 'Fraction of Credit Card payments under $5', the hack_license isn't particularly relevant\n# But for anything that examines the behavior of individual drivers:\n# full.fare = subset(full.fare, full.fare$hack_license != \"CFCD208495D565EF66E7DFF9F98764DA\")\n\ncat(\"\\nWhat fraction of payments under $5 use a credit card?\\n\")\n# exclude fare totals of $5 or above, and $0 or below.\n# I assume a fare of 0 does not count as a \"payment\".\nfare.lessthan5 = subset(fare, fare$total_amount<5 & fare$total_amount>0) \npayment.types.table = table(fare.lessthan5$payment_type)\n# For payment_types\n#   Assuming: 'CRD' = Credit Card, 'CSH' = Cash, 'DIS' = Disputed fare, 'NOC' = No charge, 'UNK' = Unknown\n#\n# Therefore, DIS, NOC, and UNK payment types are excluded, as these seem to indicate that there was no payment\n# Fraction of payments that use Credit: Credit / (Credit + Cash)\nprint(payment.types.table[1] / (payment.types.table[1]+payment.types.table[2])) # [1] is CRD, [2] is CSH\n\n\ncat(\"\\nWhat fraction of payments over $50 use a credit card?\\n\")\nfare.morethan50 = subset(fare, fare$total_amount>50)\npayment.types.table = table(fare.morethan50$payment_type)\n# Assumptions about payment_type codes listed previously\npayment.types.table[1] / (payment.types.table[1]+payment.types.table[2]) # [1] is CRD, [2] is CSH\n\n\n\n\n# Notes:\n# erroneous values for pickup lat/lon - make sure to screen for bad values\n# erroneous values for passenger_count (e.g. 255) - make sure to screen for bad values\n# store_and_fwd_flag missing for some entries\n# rate_code possibly has erroneous values (e.g. 210) \n\ncat(\"\\nWhat is the mean fare per minute driven?\\n\")\n# There are 26,878 recorded trips that report a trip time of 0 seconds,\n# and 92,707 that are less than 60 seconds.\n# Choosing a somewhat arbitrary break point:\n# Entries with trip times less than 60 seconds are excluded as being implausibly short\n# This excludes only about .6 percent of observations\n# However, the exclusion of these short trips significantly impacts the mean fare per minute\n# ~ 1.09 with min trip time = 60 seconds\n# ~ 1.41 with min trip time = 1 seconds\nfare.durations <- subset(full.fare, full.fare$trip_time_in_secs >= 60)\n\nmean(fare.durations$fare_amount/ (fare.durations$trip_time_in_secs/60)) # seconds / 60 = minutes\n# 1.09\n\n\n\n\ncat(\"\\nWhat is the median of the taxi's fare per mile driven?\\n\")\n# Similar to trip time, there are 87133 entries with a trip distance less than .01 miles\n# .01 miles is about 50 feet\n# These are excluded as implausibly short taxi trips\nfare.per.mile <- subset(full.fare, full.fare$trip_distance > .01)\n                        #& (full.fare$pickup_latitude > 15)\n                        #& (full.fare$pickup_longitude < -60))\nmedian(fare.per.mile$fare_amount / fare.per.mile$trip_distance)\n# 5\n# Many of the trips with absurdly large fare per mile values (e.g. $1000/mile) \n# are missing latitude/longitude coordinates.\n# Therefore it seems likely that the distances are being incorrectly computed.\n# However, excluding these entries does not influence the median fare per mile in this case\n\n\n\ncat(\"\\nWhat is the 95 percentile of the taxi's average driving speed in miles per hour?\\n\")\n# Erroneously short trip durations and distances are excluded, \n# as per reasoning previously mentioned\nfare.speed <- subset(full.fare, (full.fare$trip_time_in_secs >=60) \n                     & (full.fare$trip_distance    > .01)\n                     & (full.fare$pickup_latitude  > 15)\n                     & (full.fare$pickup_latitude  < 60)\n                     & (full.fare$pickup_longitude > -90)\n                     & (full.fare$pickup_longitude < -60))\n\n# avg speed = distance / time (convert sec to hour)\nfare.speed$speed = fare.speed$trip_distance / (fare.speed$trip_time_in_secs / 360)\n# Some entries with improbabably fast average speeds (over 100mph) were not caught by the previous filter\n# Thus, average speeds over 100mph are excluded, as these are certainly erroneous\nfare.speed = subset(fare.speed, fare.speed$speed<100)\nquantile(fare.speed$speed, probs = c(.95))\n#2.65 MPH\n\n\ncat(\"\\nWhat is the average ratio of the distance between the pickup and dropoff divided by the distance driven?\\n\")\n# Using the geosphere package to compute haversine distances\nrequire(geosphere)\n# There are some bad coordinate entries, but it will be easier to exclude absurd distances \n# than fiddle with precise coordinate restrictions\n# earth.radius.miles = 20925524.9 / 5280.0\n\nrequire(plyr) # used for applying a function to multiple columns of a data frame\nfare.speed = ddply(fare.speed, .(pickup_longitude, pickup_latitude, dropoff_longitude, dropoff_latitude), \n              mutate, \n              havDist = distHaversine( c(pickup_longitude, pickup_latitude), \n                                       c(dropoff_longitude, dropoff_latitude), \n                                       r=earth.radius.miles), \n              .progress=\"text\")\n\n\ngcd.hf <- function(long1, lat1, long2, lat2) {\n  R <- 20925524.9 / 5280.0 # Earth mean radius [miles]\n  delta.long <- (long2 - long1)\n  delta.lat <- (lat2 - lat1)\n  a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2\n  c <- 2 * asin(min(1,sqrt(a)))\n  d = R * c\n  return(d) \n}\n\ntest2 = mutate(test, havDist = gcd.hf( pickup_longitude, pickup_latitude, dropoff_longitude, dropoff_latitude))\n\n\n# JFK is approximately between Lat 40.667, Lon -73.812 and Lat 40.630, -73.767\nif(F){ # UNUSED BLOCK\nJFK.pickup <- function(lat, lon) {\n  #returns True if lat, lon is approximately within JFK, False otherwise\n  # if passed a bool for lat or lon, uses that as default value for comparison\n  if(is.numeric(lat)){JFK.lat = F} else {JFK.lat = lat}\n  if(is.numeric(lon)){JFK.lon = F} else {JFK.lon = lon}\n  \n  if(lat < 40.667 && lat > 40.630){JFK.lat=T} \n  if(lon < -73.767 && lon > -73.812){JFK.lon=T} #lat is positive nums, lon is negative, verify inequalities\n  return(JFK.lat && JFK.lon)\n}\n\n# To be generally on the East Coast of the US: 15<Latitude<60, -90<Longitude<-60\nbad.latitude.check <- function(lat){\n  return(lat>15 & lat<60)\n}\nbad.longitude.check <- function(lon){\n  return(lon>-90 & lon< -60)\n}\n}\n\n# JFK is approximately between 40.630 < Lat < 40.666 and -73.767 > Lon > -73.812\ncat(\"\\nWhat is the average tip for rides from JFK?\")\nJFK.fare = subset(full.fare, full.fare$pickup_latitude < 40.666 \n                  & full.fare$pickup_latitude > 40.630 #if pickup lon is in JFK\n                  & full.fare$pickup_longitude < -73.767 \n                  & full.fare$pickup_longitude > -73.812) # and pickup lat is in JFK\n                  \n\nmean(JFK.fare$tip_amount) # $4.48\n# Low average largely due to most recorded tip amounts being zero.\n# There are a few very high tip amounts that are suspicious, sich as row 1805713\n#    which indicates a fare of $6.5 dollars, and an implausibly large tip of $78.\n#    While this is likely a mistake or fabrication, it is theoretically possible \n#    the driver received an exorbitant tip for a short ride.\n# However, in this case such outliers have only a minor influence on the average.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# league matches csv header\n# matchMode,season,matchDuration,queueType,matchType,mapId,\n# p1championId,p1highestAchievedSeasonTier,p1item0,p1item1,p1item2,p1item3,p1item4,p1item5,p1item6,\n# p1sightWardsBoughtInGame,p1visionWardsBoughtInGame,wardsKilled,wardsPlaced,winner\n\nlol = read.csv(\"LeagueOfLegendsMatches.csv\", header=F)\ncolnames(lol) = c('gameNumber', 'matchNumber', 'matchMode','season','matchDuration','queueType','matchType','mapId', 'playerId',\n                  'championId','highestAchievedSeasonTier','item0','item1','item2','item3','item4','item5','item6',\n                  'sightWardsBoughtInGame','visionWardsBoughtInGame','wardsKilled','wardsPlaced',\n                  'firstInhibitorAssist', 'firstInhibitorKill', 'lane', 'winner',\n                  'baronKills', 'dragonKills', 'firstBaron', 'firstBlood', 'firstDragon', 'firstInhibitor', 'firstTower',\n                  'inhibitorKills', 'towerKills', 'deleteme')\n\nchamps = read.csv('G:/data/ChampionIds.txt', header=F)\ncolnames(champs) = c(\"championId\", \"name\")\n\n\nconvertChampIdToName <- function(id) {\n  return(champs$name[which(champs$championId==id)])\n}\n\nfor(i in 1:nrow(lol)){\n  lol$championName[i] = as.character(convertChampIdToName(lol$championId[i]))}\n\npopular = as.data.frame(table(lol$championName))\npopular = popular[order(popular$Freq),]\n\n#average match duration based on champion \n\n\n#graphs to create\n# Frequency of Champions in the dataset\n# Winrate of champions in the dataset\n# average baronKills by champion\n# average dragonKills by champion\n# probability of firstDragon by champion\n# probability of firstInhibitor by champion\n# average number of inhibitor kills by champion\n\n\n\n\n\n\n\nif(F){ #old code\n  colnames(lol) = c('matchMode','season','matchDuration','queueType','matchType','mapId',\n                  'p1championId','p1highestAchievedSeasonTier','p1item0','p1item1','p1item2','p1item3','p1item4','p1item5','p1item6',\n                  'p1sightWardsBoughtInGame','p1visionWardsBoughtInGame','p1wardsKilled','p1wardsPlaced','p1winner',\n                  'p2championId','p2highestAchievedSeasonTier','p2item0','p2item1','p2item2','p2item3','p2item4','p2item5','p2item6',\n                  'p2sightWardsBoughtInGame','p2visionWardsBoughtInGame','p2wardsKilled','p2wardsPlaced','p2winner',\n                  'p3championId','p3highestAchievedSeasonTier','p3item0','p3item1','p3item2','p3item3','p3item4','p3item5','p3item6',\n                  'p3sightWardsBoughtInGame','p3visionWardsBoughtInGame','p3wardsKilled','p3wardsPlaced','p3winner',\n                  'p4championId','p4highestAchievedSeasonTier','p4item0','p4item1','p4item2','p4item3','p4item4','p4item5','p4item6',\n                  'p4sightWardsBoughtInGame','p4visionWardsBoughtInGame','p4wardsKilled','p4wardsPlaced','p4winner',\n                  'p5championId','p5highestAchievedSeasonTier','p5item0','p5item1','p5item2','p5item3','p5item4','p5item5','p5item6',\n                  'p5sightWardsBoughtInGame','p5visionWardsBoughtInGame','p5wardsKilled','p5wardsPlaced','p5winner',\n                  'p6championId','p6highestAchievedSeasonTier','p6item0','p6item1','p6item2','p6item3','p6item4','p6item5','p6item6',\n                  'p6sightWardsBoughtInGame','p6visionWardsBoughtInGame','p6wardsKilled','p6wardsPlaced','p6winner',\n                  'p7championId','p7highestAchievedSeasonTier','p7item0','p7item1','p7item2','p7item3','p7item4','p7item5','p7item6',\n                  'p7sightWardsBoughtInGame','p7visionWardsBoughtInGame','p7wardsKilled','p7wardsPlaced','p7winner',\n                  'p8championId','p8highestAchievedSeasonTier','p8item0','p8item1','p8item2','p8item3','p8item4','p8item5','p8item6',\n                  'p8sightWardsBoughtInGame','p8visionWardsBoughtInGame','p8wardsKilled','p8wardsPlaced','p8winner',\n                  'p9championId','p9highestAchievedSeasonTier','p9item0','p9item1','p9item2','p9item3','p9item4','p9item5','p9item6',\n                  'p9sightWardsBoughtInGame','p9visionWardsBoughtInGame','p9wardsKilled','p9wardsPlaced','p9winner',\n                  'p0championId','p0highestAchievedSeasonTier','p0item0','p0item1','p0item2','p0item3','p0item4','p0item5','p0item6',\n                  'p0sightWardsBoughtInGame','p0visionWardsBoughtInGame','p0wardsKilled','p0wardsPlaced','p0winner')}\n\n\n\n",
    "created" : 1429903053366.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2604537960",
    "id" : "2967B7B6",
    "lastKnownWriteTime" : 1429743813,
    "path" : "~/TheDataIncubator/DataIncubatorChallenges.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}