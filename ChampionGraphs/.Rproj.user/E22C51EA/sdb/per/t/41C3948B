{
    "contents" : "# league matches csv header\n# matchMode,season,matchDuration,queueType,matchType,mapId,\n# p1championId,p1highestAchievedSeasonTier,p1item0,p1item1,p1item2,p1item3,p1item4,p1item5,p1item6,\n# p1sightWardsBoughtInGame,p1visionWardsBoughtInGame,wardsKilled,wardsPlaced,winner\n\n#lol = read.csv(\"LeagueOfLegendsMatches.csv\", header=F)\nlol = read.csv('G:/data/lolParse.csv', header=F)\ncolnames(lol) = c('gameNumber', 'matchNumber', 'matchMode','season','matchDuration','queueType','matchType','mapId', 'playerId',\n                  'championId','highestAchievedSeasonTier','item0','item1','item2','item3','item4','item5','item6',\n                  'sightWardsBoughtInGame','visionWardsBoughtInGame','wardsKilled','wardsPlaced',\n                  'firstInhibitorAssist', 'firstInhibitorKill', 'lane', 'winner',\n                  'baronKills', 'dragonKills', 'firstBaron', 'firstBlood', 'firstDragon', 'firstInhibitor', 'firstTower',\n                  'inhibitorKills', 'towerKills', 'deleteme')\n\nlol$deleteme = NULL\n\nchamps = read.csv('G:/data/ChampionIds.txt', header=F)\ncolnames(champs) = c(\"championId\", \"name\")\n\n\nconvertChampIdToName <- function(id) {\n  return(champs$name[which(champs$championId==id)])\n}\n\nfor(i in 1:nrow(lol)){\n  lol$championName[i] = as.character(convertChampIdToName(lol$championId[i]))}\n\npopular = as.data.frame(table(lol$championName))\npopular = popular[order(popular$Freq, decreasing=T),]\n\n#average match duration based on champion \n\n\n#graphs to create\n# Frequency of Champions in the dataset\n\n\n# Winrate of champions in the dataset\n# average baronKills by champion\n# average dragonKills by champion\n\n#champion$winnerNum = NA\n#champion$winnerNum[which(champion$winner == 'True')] = 1\n#champion$winnerNum[which(champion$winner == 'False')] = 0\n\nbalanceMeasures <- function(lol, champions=NULL) {\n  require(reshape)\n  # from a data frame containing league matches, and a vector of champion names\n  # return a data frame with columns:\n  # championName, winPct, firstDragonPct, firstBaronPct, firstInhibitorPct\n  if(is.null(champions)){\n    champions = levels(factor(lol$championName))\n  }\n  \n  if(! all(champions %in% unique(lol$championName))){\n    stop('balanceMeasures failed because it was passed unknown Champions')\n  }\n  \n  \n  balance = data.frame()\n  \n  for(champion in champions){\n    #print(champion) #debug\n    champ = subset(lol, lol$championName==champion)\n    \n    champ$winnerNum = NA\n    champ$winnerNum[which(champ$winner == 'True')] = 1\n    champ$winnerNum[which(champ$winner == 'False')] = 0\n    \n    champ$firstBaronNum = NA\n    champ$firstBaronNum[which(champ$firstBaron == 'True')] = 1\n    champ$firstBaronNum[which(champ$firstBaron == 'False')] = 0\n    \n    champ$firstDragonNum = NA\n    champ$firstDragonNum[which(champ$firstDragon == 'True')] = 1\n    champ$firstDragonNum[which(champ$firstDragon == 'False')] = 0\n    \n    champ$firstInhibitorNum = NA\n    champ$firstInhibitorNum[which(champ$firstInhibitor == 'True')] = 1\n    champ$firstInhibitorNum[which(champ$firstInhibitor == 'False')] = 0\n    \n    champ.bal = data.frame( Champion = champion,\n                            winPct = round( 100 * mean(champ$winnerNum)),\n                            firstDragonPct = round( 100 * mean(champ$firstDragonNum)),\n                            firstBaronPct = round(100 * mean(champ$firstBaronNum)),\n                            firstInhibitorPct = round(100 * mean(champ$firstInhibitorNum)))\n      \n      \n    if(nrow(balance) > 0){\n      balance = rbind(balance, champ.bal)\n    }\n    else balance = champ.bal\n    \n  }\n  \n  balance$Champion = as.factor(balance$Champion)\n  balance = melt(balance)\n  return(balance)\n}\n\n# ggplot(test4, aes(x=championName, y=winPct*100, fill=championName)) + geom_bar(stat='identity') + ylim(25,75) + labs(x='Champion', y='Win Percentage')\n\n\n# probability of firstDragon by champion\n# probability of firstInhibitor by champion\n# average number of inhibitor kills by champion\n\n\n\n\n\ntest = function(t, n){\n  C = 0\n  for k in 0:((t-n)/6){\n    C = C + (-1)^k * \n  }\n}\n\n\n\n",
    "created" : 1429744696003.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "69163241",
    "id" : "41C3948B",
    "lastKnownWriteTime" : 1429906440,
    "path" : "~/TheDataIncubator/ChampionGraphs/lol_scripts.R",
    "project_path" : "lol_scripts.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}